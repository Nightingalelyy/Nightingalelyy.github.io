---
title: Leetcode-875. Koko Eating Bananas
author: Yuyang Liu
date: 2022-1-20
category: Binary_search
order: 1
---

Description:

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 
 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 10<sup>4</sup>
piles.length <= h <= 10<sup>9</sup>
1 <= piles[i] <= 10<sup>9</sup>

Solutionï¼š

Binary Search for the median


Code: 

``` c++
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int l = 1, r = *max_element(piles.begin(), piles.end());
        
        while(l<r)
        {
            int m=l+(r-l)/2,val=0;

            
            for(auto& i:piles)
                val+=(i+m-1)/m;
            
            if(val<=h)
                r=m;
            else
                l=m+1;
        }
        return l;
        
    }
};
```
